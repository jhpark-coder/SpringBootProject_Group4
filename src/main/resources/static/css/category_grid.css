/* category_grid.css */

.category-grid-container {
    max-width: 1200px;
    margin: 40px auto;
    padding: 0 20px;
    font-family: 'Noto Sans KR', sans-serif;
}

.category-header {
    margin-bottom: 40px;
}

.category-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 20px;
}

.secondary-category-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.secondary-category-nav li a {
    display: inline-block;
    padding: 8px 20px;
    border: 1px solid #ddd;
    border-radius: 20px;
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: all 0.2s ease-in-out;
}

.secondary-category-nav li a:hover {
    background-color: #f0f0f0;
    border-color: #ccc;
}

.secondary-category-nav li a.active {
    background-color: #333;
    color: #fff;
    border-color: #333;
}


/* Product Grid Styles to match main.css */
#product-grid.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: -10px;
    /* Match gutter spacing */
    margin-right: -10px;
    /* Match gutter spacing */
}

/* Overriding .col-md-3 if necessary, or just using grid-item */
.grid-item {
    display: flex;
    flex-direction: column;
    gap: 15px;
    color: #000000;
    margin-bottom: 30px;
    /* Add some space between rows */
    padding: 0 10px;
    /* Gutter spacing */
    flex-basis: 25%;
    /* 4 items per row */
    /*min-width: 280px;*/
}

.grid-item a {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    height: 100%;
}

.item-image-placeholder.box {
    width: 100%;
    padding-top: 100%;
    /* 1:1 Aspect Ratio */
    background-color: #fff;
    background-size: cover;
    background-position: center;
    border-radius: 8px;
    /* Rounded corners for the image */
    /* 애니메이션을 위한 스타일 */
    --box-width: 100%; /* 너비는 부모에 꽉 차도록 100%로 설정 */
    /* 높이는 padding-top으로 이미 1:1 비율이 맞춰졌으므로 height 속성은 제거해도 됨 */

    --frag-width: calc(var(--box-width) / var(--col));
    /* --frag-height는 JS에서 높이를 직접 계산하도록 하는 것이 더 안정적입니다. */

    position: relative; /* 자식인 fragment들의 기준점 */
    overflow: hidden; /* 혹시 모를 오버플로우 방지 */
    background-image: var(--img-url); /* JS가 설정해줄 변수를 바로 사용 */
    /* 기존 background-image를 사용하는 대신, JS가 --img-url을 설정하면 fragment들이 사용합니다. */
    /* 따라서 아래의 배경 이미지 설정은 JS가 fragment를 만들기 전의 '자리표시' 역할만 합니다. */
}

.item-info {
    padding: 15px 5px;
    /* Adjust padding */
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
    /* Pushes info to the bottom */
}

.seller-info {
    display: flex;
    align-items: center;
    gap: 8px;
}

.seller-avatar {
    width: 30px;
    height: 30px;
    background-color: #ddd;
    border-radius: 50%;
}

.seller-name {
    font-size: 13px;
    color: #666;
    font-weight: 500;
}

.subscribe-btn, .follow-btn {
    padding: 6px 14px;
    font-size: 0.85rem;
    font-weight: bold;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 25px;
    /* Rounded button */
    cursor: pointer;
    transition: background-color 0.2s;
}

.subscribe-btn:hover, .follow-btn:hover {
    background-color: #0056b3;
}

/* 로딩 스피너 및 페이지네이션 버튼 스타일 */
#loading-spinner p {
    font-size: 1.2rem;
    color: #555;
}

#pagination-controls .btn {
    padding: 10px 30px;
    font-size: 1.1rem;
    background-color: #333;
    color: white;
    text-decoration: none;
    border-radius: 5px;
}

#pagination-controls .btn:hover {
    background-color: #555;
}

/* 페이지네이션 컨트롤 추가 스타일 */
.pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin-top: 40px;
}

.page-btn {
    padding: 8px 16px;
    font-size: 1rem;
    background-color: #f0f0f0;
    color: #333;
    text-decoration: none;
    border-radius: 5px;
    border: 1px solid #ddd;
}

.page-btn:hover {
    background-color: #e0e0e0;
}

.current-page-display {
    font-size: 1.1rem;
    font-weight: bold;
    color: #555;
}

/*Animation을 위한 CSS*/
.box.hide {
    /* 중요: 애니메이션 시작 시 원본 이미지가 보이지 않도록 배경을 투명하게 만듭니다. */
    background-image: none !important;
}
.box.hide::after { opacity: 0; }
.fragment {
 position: absolute; /* 부모(.box) 기준으로 위치를 잡기 위해 absolute로 변경 */
  /* JS가 넘겨준 변수들을 이용해 각 조각의 배경 이미지 위치를 계산 */
  --x-offset: calc(var(--x) * var(--frag-width) * -1);
  --y-offset: calc(var(--y) * var(--frag-height) * -1);

  /* JS가 넘겨준 회전 값 (초기 상태) */
  --rotateX: rotateX(0);
  --rotateY: rotateY(0);

  width: var(--frag-width); /* 위에서 계산한 조각 너비 */
  height: var(--frag-height); /* 위에서 계산한 조각 높이 */

  /* 각 조각에 맞는 이미지 부분을 배경으로 설정 (퍼즐 맞추기) */
  background-image: var(--img-url);
  background-position:var(--x-offset) var(--y-offset)
  background-size: var(--box-width) var(--box-height)
  background-repeat: no-repeat;

  /* 3D 효과를 위한 설정 */
  backface-visibility: hidden;

  /* 애니메이션 성능 향상을 위한 힌트 */
  will-change: transform;

  /* 초기 변형 상태 */
  transform: var(--rotateX) var(--rotateY) scale(0.8);

  /* 최종적으로 애니메이션을 적용하는 부분! */
  animation: flip var(--duration) linear var(--delay) forwards;
}
@keyframes flip {
  0% { transform: var(--rotateX) var(--rotateY) scale(0.8); opacity: 0; }
  70% { transform: rotateX(0) rotateY(0) scale(0.8); opacity: 1; }
  100% { transform: rotateX(0) rotateY(0) scale(1); }
}