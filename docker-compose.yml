# 운영 환경용 docker-compose.yml (production)

services:
  # Spring Boot 애플리케이션 서비스
  nexus-spring-app:
    build: .
    container_name: nexus-spring-app
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - redis-cache
    environment:
      SPRING_PROFILES_ACTIVE: prod
      # RDS 사용 (application-prod.properties에서 설정)
      SPRING_DATA_REDIS_HOST: redis-cache
      SPRING_DATA_REDIS_PORT: 6379

  # NestJS 알림/채팅 서버 서비스 (운영 모드 - 빌드된 파일 사용)
  notification-server:
    build:
      context: notification-server
      dockerfile: Dockerfile.prod
    container_name: nexus-notification-server
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      # RDS MariaDB 연결
      DATABASE_URL: jdbc:mariadb://nexus-db.c1uoscweiicf.ap-northeast-2.rds.amazonaws.com:3306/springproject?useSSL=false&serverTimezone=UTC&characterEncoding=utf8mb4&useUnicode=true&characterSetResults=utf8mb4&connectionCollation=utf8mb4_unicode_ci&initSQL=SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci
      DATABASE_USERNAME: nexus_user
      DATABASE_PASSWORD: nexus_password
      # Docker 컨테이너에서 Spring Boot에 접근하기 위한 주소 (컨테이너 이름 사용)
      SPRING_BOOT_URL: http://nexus-spring-app:8080
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379

  # Redis 서비스 정의
  redis-cache:
    image: redis:latest
    container_name: nexus-redis-cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

volumes:
  redis-data:
